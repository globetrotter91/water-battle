{"version":3,"sources":["webpack:///webpack/bootstrap 4790ad83eaeeb400bb94","webpack:///./client/game/start.js","webpack:///./client/game/Window.js","webpack:///./client/game/Game.js","webpack:///./client/game/Ocean.js","webpack:///./client/game/Player.js","webpack:///./client/game/Bomb.js","webpack:///./client/game/constants.js"],"names":["windowObj","initialize","Window","height","width","updateSize","window","onresize","inEvent","handleWindowResize","game","resize","renderGame","requestAnimationFrame","bind","update","innerWidth","innerHeight","Game","renderer","THREE","WebGLRenderer","camera","PerspectiveCamera","scene","Scene","controls","OrbitControls","domElement","ocean","selfId","playerList","bombList","socket","io","connect","location","protocol","host","bindSocketEvents","context","getExtension","setClearColor","document","body","appendChild","userPan","target","set","noKeys","userPanSpeed","minDistance","maxDistance","minPolarAngle","maxPolarAngle","Math","PI","initializeLoader","initializeCommands","initializeScene","serverRequest","loadingManager","LoadingManager","log","message","type","timeout","console","delay","onProgress","item","loaded","total","onLoad","onError","imageLoader","ImageLoader","onkeydown","event","keyCode","emit","inputId","state","onkeyup","setLighting","setOcean","loadSkyBox","shadowMap","enabled","mainDirectionalLight","DirectionalLight","position","add","AmbientLight","initiate","cubeShader","ShaderLib","skyBoxMaterial","ShaderMaterial","fragmentShader","vertexShader","uniforms","side","BackSide","skyBox","Mesh","BoxGeometry","updateEnvironment","directionalLightPosition","Vector3","directionalLightColor","Color","copy","color","cubeMap","CubeTexture","format","RGBFormat","loader","load","image","getSide","x","y","size","canvas","createElement","getContext","drawImage","images","needsUpdate","generateMipmaps","magFilter","LinearFilter","minFilter","material","value","render","display","inWidth","inHeight","aspect","updateProjectionMatrix","setSize","data","ship","forEach","idx","id","player","name","lives","score","initializeControls","bomb","angle","speed","shipId","remove","bombId","on","handleGameStarted","handleInitialized","handleUpdated","handleRemoved","handleGameEnded","playerName","xhttp","XMLHttpRequest","that","onreadystatechange","readyState","status","resJson","JSON","parse","responseText","playerId","open","send","Ocean","parameters","oceanSide","distortionScale","alpha","object","Water","textureWidth","textureHeight","waterNormals","TextureLoader","texture","wrapS","wrapT","RepeatWrapping","sunDirection","clone","normalize","sunColor","waterColor","rotation","receiveShadow","time","Player","Object3D","OBJMTLLoader","children","child","DoubleSide","lookAt","z","Bomb","geometry","IcosahedronGeometry","i","j","faces","length","setHex","random","MeshPhongMaterial","vertexColors","FaceColors","shininess","castShadow","URL","API_URL","START_PAGE","getElementById","GAME_CONTAINER","ENTERGAME_REQUEST","ENTERGAME_RESPONSE","DISCONNECT","EVAL_SERVER","EVAL_SERVER_RESPONSE","INITIALIZE","UPDATE","REMOVE","EVENT_HAPPENED","COLOR_SELECTED","GAME_LOST"],"mappings":"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","file":"./client/js/game-ui.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4790ad83eaeeb400bb94","import Window from './Window';\n// create a window object\nlet windowObj = new Window(0,0);\n// initialise the window object\nwindowObj.initialize();\n\n\n// WEBPACK FOOTER //\n// ./client/game/start.js","import Game from './Game';\n/**\n * @class Window\n * @description Class for handling window events and setting defaults for the game\n * @author Satyam Saxena\n */\nexport default class Window {\n    /**\n     * \n     * @param {*} height the height of the window\n     * @param {*} width the width of the window\n     */\n    constructor( height, width ) {\n\n        this.height = height;\n        this.width = width;\n\n    }\n    /**\n     * @description this method initializes the game height and width and adds resize handler\n     */\n    initialize() {\n\n        this.updateSize();\n        window.onresize = ( inEvent ) => {\n            this.updateSize();\n            this.handleWindowResize();\n        };\n        this.game = new Game(this.width, this.height);\n        this.game.initialize();\n        this.game.resize(this.width, this.height);\n        this.renderGame()\n    }\n\n    /**\n     * @description  This method is used to request frames at 60FPS and update the game.\n     */\n    renderGame() {\n\n        requestAnimationFrame( this.renderGame.bind(this) );\n        this.game.update();\n        \n    }\n\n    /**\n     * @description this method sets the height and width to the inner with and inner height of the window\n     */\n    updateSize() {\n\n        this.width = window.innerWidth;\n        this.height = window.innerHeight;\n\n    }\n\n    /**\n     * @description this method handles the window resize\n     */\n    handleWindowResize() {\n        this.game.resize( this.width, this.height );\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./client/game/Window.js","import Ocean from './Ocean';\nimport Player from './Player';\nimport Bomb from './Bomb';\nimport { ENTERGAME_REQUEST, ENTERGAME_RESPONSE, API_URL, INITIALIZE, UPDATE, REMOVE, GAME_LOST, EVENT_HAPPENED } from './constants';\n/**\n * @class Game \n * @description Main class for the game. Contains initialization server communication functions\n */\nclass Game {\n    /**\n     * \n     * @param {*} width the width of the game container\n     * @param {*} height the height of the game container\n     */\n    constructor( width, height ) {\n\n        this.renderer = new THREE.WebGLRenderer();\n        this.camera = new THREE.PerspectiveCamera( 55.0, width / height, 0.5, 1000000 );\n        this.scene = new THREE.Scene();\n        this.controls = new THREE.OrbitControls( this.camera, this.renderer.domElement );\n        this.ocean = null;\n        this.width = width;\n        this.height = height;\n        this.selfId = null;\n        this.playerList = {};\n        this.bombList = {};\n        // socket coection to serve\n        this.socket = io.connect( `${window.location.protocol}//${window.location.host}` );\n        // binding the socket events coming from the server\n        this.bindSocketEvents();\n\n    }\n\n    /**\n     * @description This method is used to set the extensions of WEBGL and set them to the renderer. \n     * Sets up the user controls ans calls other methods required for rendering the scene.\n     */\n    initialize() {\n\n        this.renderer.context.getExtension( 'OES_texture_float' );\n        this.renderer.context.getExtension( 'OES_texture_float_linear' );\n        this.renderer.setClearColor( 0x000000 );\n\n        document.body.appendChild( this.renderer.domElement );\n\n        // Initialize Orbit control\n        this.controls.userPan = false;\n        this.controls.target.set( 0, 100.0, 0 );\n        this.controls.noKeys = true;\n        this.controls.userPanSpeed = 0;\n        this.controls.minDistance = 0;\n        this.controls.maxDistance = 20000.0;\n        this.controls.minPolarAngle = 0;\n        this.controls.maxPolarAngle = Math.PI * 0.75;\n\n        //this.scene.fog = new THREE.FogExp2( 0xaabbbb, 0.001 );\n        this.initializeLoader();\n        this.initializeCommands();\n        this.initializeScene();\n\n        //TODO: Make this dyamic. Take user input for name\n        this.serverRequest( 'saty', 'ff00ff' );\n\n    }\n\n    /**\n     * @description This method is used for initializing the image loader and loading manager for the game\n     * All images and textures can be loaded using this method\n     * The assets loaded can also be logged on the console.\n     */\n    initializeLoader() {\n        \n        this.loadingManager = new THREE.LoadingManager();\n        var log = function ( message, type, timeout ) {\n            console.log( message );\n        }\n        var delay = 1500;           // constantise\n        this.loadingManager.onProgress = function ( item, loaded, total ) {\n            log( 'Loaded ' + loaded + '/' + total + ':' + item, 'info', delay );\n        };\n        this.loadingManager.onLoad = function () {\n            log( 'Loaded.', 'success', delay );\n        };\n        this.loadingManager.onError = function () {\n            log( 'Loading error.', 'error', delay );\n        };\n        this.imageLoader = new THREE.ImageLoader( this.loadingManager );\n\n    }\n\n    /**\n     * @description This method initialises the commands and keyboard events to send a socket event when the keys are pressed/\n     */\n    initializeCommands() {\n        //handling the key down event \n        //fires a event sending the event data to server\n        //-- helps in movement of the player\n        document.onkeydown = ( event ) => {\n            \n            if ( this.socket ) {\n                if ( event.keyCode === 39 ) {\n                    this.socket.emit( EVENT_HAPPENED, { inputId: 'right', state: true } );\n                }\t//right\n\n                else if ( event.keyCode === 40 ) {\n                    this.socket.emit( EVENT_HAPPENED, { inputId: 'down', state: true } );\n                }\t//down\n\n                else if ( event.keyCode === 37 ) {\n                    this.socket.emit( EVENT_HAPPENED, { inputId: 'left', state: true } );\n                } //left\n\n                else if ( event.keyCode === 38 ) {\n                    this.socket.emit( EVENT_HAPPENED, { inputId: 'up', state: true } );\n                } // up\n\n                else if ( event.keyCode === 32 ) {\n                    this.socket.emit( EVENT_HAPPENED, { inputId: 'attack', state: true } );\n                } // space\n            }\n\n        }\n\n        //handling the key up event\n        //fires a event sending the event data to server based on the key codes\n        //-- helps in stopping movement of the player\n        document.onkeyup = ( event ) => {\n            \n            if (this.socket) {\n                if ( event.keyCode === 39 ) {\n                    this.socket.emit( EVENT_HAPPENED, { inputId: 'right', state: false } );\n                }\t//right\n\n                else if ( event.keyCode === 40 ) {\n                    this.socket.emit( EVENT_HAPPENED, { inputId: 'down', state: false } );\n                }\t//down\n\n                else if ( event.keyCode === 37 ) {\n                    this.socket.emit( EVENT_HAPPENED, { inputId: 'left', state: false } );\n                } //left\n\n                else if ( event.keyCode === 38 ) {\n                    this.socket.emit( EVENT_HAPPENED, { inputId: 'up', state: false } );\n                } // up\n\n                else if ( event.keyCode === 32 ) {\n                    this.socket.emit( EVENT_HAPPENED, { inputId: 'attack', state: false } );\n                } // space\n            }\n\n        }\n\n    }\n\n    /**\n     * @description This method is sets the lightning, sets the ocean board and sets loads the sky-view\n     */   \n    initializeScene() {\n\n        this.setLighting();\n        this.setOcean();\n        this.loadSkyBox();\n\n    }\n\n    /**\n     * @description This method is used to set the lightning in the scene using direction and ambient light.\n     */\n    setLighting() {\n\n        this.renderer.shadowMap.enabled = true;\n        this.mainDirectionalLight = new THREE.DirectionalLight( 0xffffbb, 1 );\n        this.mainDirectionalLight.position.set( -30, 30, -30 );\n        this.scene.add( this.mainDirectionalLight, new THREE.AmbientLight( 0x888888 ) );\n\n    }\n\n    /**\n     * @description This method is used to set the ocean in the scene.\n     */\n    setOcean() {\n\n        this.ocean = new Ocean( this )\n        this.ocean.initiate();\n    }\n\n    /**\n     * @description This method is used to load the skybox in which the game runs and it sets up the camera.\n     */\n    loadSkyBox() {\n\n        var cubeShader = THREE.ShaderLib[ 'cube' ];\n\n        var skyBoxMaterial = new THREE.ShaderMaterial( {\n            fragmentShader: cubeShader.fragmentShader,\n            vertexShader: cubeShader.vertexShader,\n            uniforms: cubeShader.uniforms,\n            side: THREE.BackSide\n        } );\n\n        this.skyBox = new THREE.Mesh(\n            new THREE.BoxGeometry( 450000, 450000, 450000 ),\n            skyBoxMaterial\n        );\n\n        this.scene.add( this.skyBox );\n\n        this.updateEnvironment();\n\n    }\n\n    /**\n     * @description This method renders the environment of the game things like the clouds and sunshine\n     */\n    updateEnvironment() {\n\n        var directionalLightPosition = new THREE.Vector3( -1, 0.5, 0.8 );\n        var directionalLightColor = new THREE.Color( 1, 0.95, 0.8 );\n        this.mainDirectionalLight.position.copy( directionalLightPosition );\n        this.mainDirectionalLight.color.copy( directionalLightColor );\n        let cubeMap = new THREE.CubeTexture( [] );\n        cubeMap.format = THREE.RGBFormat;\n        var loader = this.imageLoader;\n        loader.load( 'textures/skyboxsun25degtest.png', function ( image ) {\n            var getSide = function ( x, y ) {\n                var size = 1024;\n                var canvas = document.createElement( 'canvas' );\n                canvas.width = size;\n                canvas.height = size;\n                var context = canvas.getContext( '2d' );\n                context.drawImage( image, -x * size, -y * size );\n                return canvas;\n            };\n            cubeMap.images[ 0 ] = getSide( 2, 1 ); // px\n            cubeMap.images[ 1 ] = getSide( 0, 1 ); // nx\n            cubeMap.images[ 2 ] = getSide( 1, 0 ); // py\n            cubeMap.images[ 3 ] = getSide( 1, 2 ); // ny\n            cubeMap.images[ 4 ] = getSide( 1, 1 ); // pz\n            cubeMap.images[ 5 ] = getSide( 3, 1 ); // nz\n            cubeMap.needsUpdate = true;\n        } );\n        cubeMap.format = THREE.RGBFormat;\n        cubeMap.generateMipmaps = false;\n        cubeMap.magFilter = THREE.LinearFilter;\n        cubeMap.minFilter = THREE.LinearFilter;\n\n        this.skyBox.material.uniforms[ 'tCube' ].value = cubeMap;\n\n    }\n\n    /**\n     * @description This method adds the scene instance and camera instance to the renderer.\n     */\n    display() {\n        this.renderer.render( this.scene, this.camera );\n    }\n\n    /**\n     * @description This method updates every frame of the game.\n     */\n    update() {\n\n        if ( this.camera.position.y < 0.0 ) {\n            this.camera.position.y = 2.0;\n        }\n\n        this.ocean.update();\n        this.display();\n\n    }\n\n    /**\n     * //@TODO\n     * @param {*} inWidth  width to resize to\n     * @param {*} inHeight height to resize to\n     */\n    resize( inWidth, inHeight ) {\n        // TODO: implement the function // currently not working\n        this.camera.aspect = inWidth / inHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize( inWidth, inHeight );\n        this.display();\n\n    }\n\n    /**\n     * \n     * @param {*} data data from the server\n     * @description This function handles the game start event\n     */\n    handleGameStarted( data ) {\n        console.log\n        this.selfId = data.selfId;\n    }\n\n    /**\n     * \n     * @param {*} data data from the server\n     * @description This function handles the initialise event from the server\n     */\n    handleInitialized( data ) {\n        \n        if(this.selfId) {\n            data.ship.forEach( ( ship, idx ) => {\n                if( !this.playerList[ ship.id ] ) {\n                    \n                    var player = new Player( ship.id, ship.name, ship.lives, ship.score, this, ship.position );\n                    player.initialize();\n                    if ( ship.id === this.selfId ) {\n                        player.initializeControls();\n                    }\n        \n                    this.playerList[ ship.id ] = player;\n                }\n                \n            } );\n\n            data.bomb.forEach( ( bomb, idx ) => {\n                if ( !this.bombList[ bomb.id ] ) {\n                    var bomb = new Bomb( bomb.id, this, bomb.position );\n                    bomb.initialize();\n                    this.bombList[ bomb.id ] = bomb;\n                }\n            } );\n        }\n\n    }\n\n    /**\n     * \n     * @param {*} data data from the server\n     * @description This function handles the update event from the server\n     */\n    handleUpdated( data ) {\n\n        data.ship.forEach( ( ship, idx ) => {\n            if ( this.playerList[ ship.id ] ) {\n                this.playerList[ ship.id ].update( ship.position, ship.angle, ship.score, ship.lives, ship.speed );\n            }\n        } );\n\n        data.bomb.forEach( ( bomb, idx ) => {\n            if ( this.bombList[ bomb.id ] ) {\n                this.bombList[ bomb.id ].update( bomb.position );\n            }\n        } );\n    }\n\n    /**\n     * \n     * @param {*} data data from the server\n     * @description This function handles the remove event from the server\n     */\n    handleRemoved( data ) {\n\n        data.ship.forEach( ( shipId, idx ) => {\n            if ( this.playerList[ shipId ] ) {\n                this.playerList[ shipId ].remove();\n                delete this.playerList[ shipId ];\n            }\n        } );\n\n        data.bomb.forEach( ( bombId, idx ) => {\n            if ( this.bombList[ bombId ] ) {\n                this.bombList[ bombId ].remove();\n                delete this.bombList[ bombId ];\n            }\n        } );\n    }\n\n    /**\n     * //TODO\n     * @param {*} data data from the server\n     * @description This function handles the game over event from the server\n     */\n    handleGameEnded( data ) {\n        console.log( 'game over bitch', data );\n        //TODO : implement game over logic and UI\n    }\n\n\n    /**\n     * \n     * @description This function binds the socket events and data from the server\n     */\n    bindSocketEvents() {\n\n        this.socket.on( ENTERGAME_RESPONSE, this.handleGameStarted.bind( this ) );\n        // handling server response when a player is initialized\n        this.socket.on( INITIALIZE, this.handleInitialized.bind( this ) );\n\n        // handling server response when a player is moving or attacking\n        this.socket.on( UPDATE, this.handleUpdated.bind( this ) );\n\n        // handling server response when a player is removed\n        this.socket.on( REMOVE, this.handleRemoved.bind( this ) );\n\n        // handling server response when a player has lost\n        this.socket.on( GAME_LOST, this.handleGameEnded.bind( this ) );\n\n    }\n\n    /**\n     * \n     * @param {*} playerName name of the player \n     * @param {*} color //TODO: this variable can be used for taking some other iformation from the player before entering the game\n     * @description This method sends the request to the server when the users enters name. According the server response the game is initialised.\n     */\n    serverRequest( playerName, color ) {\n        \n        var data = `name=${playerName}&color=${color}`;\n        var xhttp = new XMLHttpRequest();\n        var that = this;\n        xhttp.onreadystatechange = function () {\n            if ( this.readyState == 4 && this.status == 200 ) {\n\n                var resJson = JSON.parse( this.responseText );\n                that.socket.emit( ENTERGAME_REQUEST, { playerId: resJson.id, playerName: resJson.name, color: resJson.color } );\n            }\n        };\n        xhttp.open( 'GET', `${API_URL}/users?${data}`, true );\n        xhttp.send();\n\n    }\n}\n\nexport default Game;\n\n\n// WEBPACK FOOTER //\n// ./client/game/Game.js","/**\n * @class Ocean\n * @description Ocean class to add and update the ocean to the scene\n * @author Satyam Saxena\n */\nclass Ocean {\n\n    /**\n     * \n     * @param {*} game object of the game\n     */\n    constructor( game ) {\n\n        this.game = game;\n        // default parameters for the ocean display\n        this.parameters = {\n            oceanSide: 30000,\n            size: 1.0,\n            distortionScale: 3.7,\n            alpha: 1.0\n        }\n        this.object = new THREE.Water(\n            this.parameters.oceanSide * 5,\n            this.parameters.oceanSide * 5,\n            {\n                textureWidth: 512,\n                textureHeight: 512,\n                waterNormals: new THREE.TextureLoader().load( 'textures/waternormals.jpg', ( texture ) => {\n                    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n                } ),\n                alpha: this.parameters.alpha,\n                sunDirection: this.game.mainDirectionalLight.position.clone().normalize(),\n                sunColor: 0xffffff,\n                waterColor: 0x001e0f,\n                distortionScale: this.parameters.distortionScale,\n            }\n        );\n\n    }\n\n    /**\n     * @description This method is used to initiate the ocean view in the scene\n     */\n    initiate() {\n\n        this.object.rotation.x = -Math.PI / 2;\n        this.object.receiveShadow = true;\n        this.game.scene.add( this.object );\n\n    }\n\n    /**\n     * @description This method is used to update the ocean, waves and distortion and lightning\n     */\n    update() {\n\n        this.object.material.uniforms.time.value += 1.0 / 60.0;\n        this.object.material.uniforms.size.value = this.parameters.size;\n        this.object.material.uniforms.distortionScale.value = this.parameters.distortionScale;\n        this.object.material.uniforms.alpha.value = this.parameters.alpha;\n\n    }\n}\n\nexport default Ocean;\n\n\n// WEBPACK FOOTER //\n// ./client/game/Ocean.js","/**\n * @class Player\n * @description Class to add, remove and update the players of the game and adding controls to the playing player\n * @author Satyam Saxena\n */\nclass Player {\n    /**\n     *\n     * @param id id of the player\n     * @param name name of the player\n     * @param lives lives remaining of the player\n     * @param score current score of the player\n     * @param game object of the game\n     * @param position initial position of the player\n     */\n    constructor( id, name, lives, score, game, position ) {\n\n        this.id = id;\n        this.name = name;\n        this.lives = lives;\n        this.score = score;\n        this.game = game;\n        this.object = new THREE.Object3D();\n        this.ship = new THREE.Object3D();\n        this.position = position;\n\n    }\n\n    /**\n     * @description this method loads the obj and mtl file of the player ship\n     */\n    load() {\n\n        var loader = new THREE.OBJMTLLoader( this.game.loadingManager );\n\n        loader.load( 'models/BlackPearl/BlackPearl.obj', 'models/BlackPearl/BlackPearl.mtl', ( object ) => {\n            object.position.y = 20.0;\n            if ( object.children ) {\n\n                for ( var child in object.children ) {\n                    object.children[ child ].material.side = THREE.DoubleSide;\n                }\n\n            }\n            this.ship.add( object );\n        } );\n\n    }\n\n    /**\n     * @description This method initialises the ship for all players and position them on the ocean.\n     */\n    initialize() {\n        \n        //TODO: position all ships at accurate postion now only positioning at 000\n        //this.object.position.x = this.position.x || 0;\n        //this.object.position.y = this.position.y || 0;\n        //this.object.position.z = this.position.z || 0;\n\n        this.game.scene.add( this.object );\n        this.object.add( this.ship );\n        this.load();\n\n    }\n\n    /**\n     *@description This method initialises the controls for a player if the player is the user playing\n     */\n    initializeControls() {\n\n        this.game.camera.position.set( 0, 350, 800 );\n        this.game.camera.lookAt( new THREE.Vector3() );\n        this.ship.add( this.game.camera );\n\n    }\n\n    /**\n     *\n     * @param {*} position new position of the ship from the server.\n     * @param {*} angle angle of the ship relative to the previous position\n     * @param {*} score updated score of the player\n     * @param {*} lives updated lives of the player\n     * @param {*} speed updated speed of the player\n     * @description this method updates the position of the player with vectos coming from the server\n     */\n    update( position, angle, score, lives, speed ) {\n\n        this.object.position.x = position.x;\n        this.object.position.y = position.y;\n        this.object.position.z = position.z;\n        this.object.rotation.y += angle;\n        this.lives = lives;\n        this.score = score;\n        //TODO: movement and toppling of ship withing the object\n        this.ship.rotation.z = -angle * 10.0;\n        this.ship.rotation.x = speed * 0.1;\n\n    }\n\n    /**\n     * @description this method removes the player from the screen on disconnect of game lost.\n     */\n    remove() {\n        this.game.scene.remove( this.object );\n    }\n\n}\n\nexport default Player;\n\n\n// WEBPACK FOOTER //\n// ./client/game/Player.js","/**\n * @class Bomb\n * @description Class for creating, updating and removing the bombs in the game.\n * @author Satyam Saxena\n */\nclass Bomb {\n    /**\n     *\n     * @param id: id of the bomb\n     * @param game: object of the game\n     * @param position: initial position Vector of the bomb on the screen\n     */\n    constructor( id, game, position ) {\n\n        this.id = id;\n        this.game = game;\n        this.position = position;\n\n        this.geometry = new THREE.IcosahedronGeometry( 20, 2 );\n        for ( var i = 0, j = this.geometry.faces.length; i < j; i++ ) {\n            this.geometry.faces[ i ].color.setHex( Math.random() * 0xffffff );\n        }\n\n        this.material = new THREE.MeshPhongMaterial( {\n            vertexColors: THREE.FaceColors,\n            shininess: 10,\n            side: THREE.DoubleSide\n        } );\n        // this is the mesh object of the bomb which is for adding the bomb to the scene and updating its position.\n        this.object = new THREE.Mesh( this.geometry, this.material );\n        this.object.castShadow = true;\n        \n    }\n\n    /**\n     *\n     * @description This method initialises the bomb on the screen.\n     *\n     */\n    initialize() {\n\n        this.object.position.x = this.position.x;\n        this.object.position.y = this.position.y;\n        this.object.position.z = this.position.z;\n        this.game.scene.add( this.object )\n\n    }\n\n    /**\n     *\n     * @description This method updates the postion of the bomb receiving the position from the server\n     * @param position: updated position vector of the bomb from server\n     *\n     */\n    update( position ) {\n\n        this.object.position.x = position.x;\n        this.object.position.y = position.y;\n        this.object.position.z = position.z;\n\n    }\n\n    /**\n     *\n     * @description This method removes the bomb on the screen.\n     *\n     */\n    remove() {\n        this.game.scene.remove( this.object );\n    }\n}\n\nexport default Bomb;\n\n\n// WEBPACK FOOTER //\n// ./client/game/Bomb.js","export const URL = \"http://localhost:8000\";\nexport const API_URL = \"http://localhost:8000/api\";\nexport const START_PAGE = document.getElementById('startPage');\nexport const GAME_CONTAINER = document.getElementById('gameContainer');\n\n//socket events \nexport const ENTERGAME_REQUEST = 'ENTERGAME_REQUEST';\nexport const ENTERGAME_RESPONSE = 'ENTERGAME_RESPONSE';\nexport const DISCONNECT = 'disconnect';\nexport const EVAL_SERVER = 'EVAL_SERVER';\nexport const EVAL_SERVER_RESPONSE = 'EVAL_SERVER_RESPONSE';\nexport const INITIALIZE = 'INITIALIZE';\nexport const UPDATE = 'UPDATE';\nexport const REMOVE = 'REMOVE';\nexport const EVENT_HAPPENED = 'EVENT_HAPPENED';\nexport const COLOR_SELECTED = 'COLOR_SELECTED'; \nexport const GAME_LOST = 'GAME_LOST'; \n\n\n\n// WEBPACK FOOTER //\n// ./client/game/constants.js"],"sourceRoot":""}